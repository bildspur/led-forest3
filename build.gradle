plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'application'
    id 'org.bytedeco.gradle-javacpp-platform' version "$javacppVersion"
}

group 'ch.bildspur'
version '3.1'

import org.gradle.internal.os.OperatingSystem

wrapper {
    gradleVersion = '7.4.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-bin.zip"
}

javafx {
    version = "11"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.graphics']
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // jmetro
    implementation 'org.jfxtras:jmetro:11.6.15'

    // json
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.4.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'

    // bildspur libs
    implementation "com.github.cansik:bildspur-base:0.3.5"
    implementation 'com.github.cansik:bildspur-ui:0.4.2'

    // processing
    implementation files("lib/processing/core.jar")
    implementation files("lib/processing/gluegen-rt.jar")
    implementation files("lib/processing/jogl-all.jar")
    // implementation 'com.github.micycle1:processing-core-4:4.0b6c'

    // postfx
    implementation files('lib/postfx/PostFX.jar')

    // artnet
    implementation 'ch.bildspur:artnet4j:0.6.2'

    // illposed osc
    implementation group: 'com.illposed.osc', name: 'javaosc-core', version: '0.8'

    // javafx
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.1'

    // leap motion java
    implementation files('lib/LeapMotion/library/LeapJava.jar')
    implementation files('lib/LeapMotion/library/LeapMotion.jar')

    // jdms
    implementation group: 'org.jmdns', name: 'jmdns', version: '3.5.7'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.36'

    // oscp5 for osc output and input
    implementation files('lib/plugins/oscP5/oscP5.jar')

    // peasy cam
    implementation files('lib/plugins/peasycam/peasycam.jar')

    // minim for audio
    implementation files('lib/plugins/minim/library/minim.jar')
    implementation files('lib/plugins/minim/library/jsminim.jar')
    implementation files('lib/plugins/minim/library/jl1.0.1.jar')
    implementation files('lib/plugins/minim/library/mp3spi1.9.5.jar')
    implementation files('lib/plugins/minim/library/tritonus_aos.jar')
    implementation files('lib/plugins/minim/library/tritonus_share.jar')

    // deep vision
    implementation 'com.github.cansik:deep-vision-processing:9eebd0c440'

    // javacv & javacpp
    implementation group: 'org.bytedeco', name: 'javacv', version: "$javacppVersion"
    implementation group: 'org.bytedeco', name: 'opencv-platform', version: "4.4.0-$javacppVersion"
    implementation group: 'org.bytedeco', name: 'openblas-platform', version: "0.3.10-$javacppVersion"
    implementation group: 'org.bytedeco', name: 'ffmpeg-platform', version: "4.3.1-$javacppVersion"

    // librealsense
    implementation group: 'org.bytedeco', name: 'librealsense2-platform', version: "2.29.0-$javacppVersion"
    implementation 'com.github.cansik:librealsense-java:0.2.1'
    implementation 'com.github.cansik:realsense-processing:2.2.0'
}

application {
    mainClass = "ch.bildspur.ledforest.Main"

    // find jvm args
    def defaultJvmArgs = ''
    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            project.ext.osName = "linux"
            defaultJvmArgs = "lib/LeapMotion/library/linux64"
            break
        case OperatingSystem.MAC_OS:
            project.ext.osName = "macos"
            defaultJvmArgs = "lib/LeapMotion/library/macosx"
            break
        case OperatingSystem.WINDOWS:
            project.ext.osName = "windows"
            defaultJvmArgs = "lib/LeapMotion/library/windows64"
            break
    }

    applicationDefaultJvmArgs = ["-Djava.library.path=$defaultJvmArgs",
                                 "--add-opens", "javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED",
                                 "--add-opens", "javafx.graphics/javafx.stage=ALL-UNNAMED",
                                 "--add-opens", "javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED",
                                 "--add-opens", "javafx.graphics/com.sun.javafx.application=ALL-UNNAMED",
                                 "--add-opens", "javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED",
                                 "--add-opens", "javafx.controls/com.sun.javafx.scene.control.inputmap=ALL-UNNAMED",
                                 "--add-opens", "javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED",
                                 "--add-opens", "javafx.graphics/com.sun.glass.ui=ALL-UNNAMED"]
}

task fatJar(type: Jar) {
    archiveBaseName = project.name + '-all'
    doFirst {
        from {
            configurations.compileClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}